<!-- Reusable Input Component - Fully Responsive -->
<%
  // Default values
  const inputId = locals.id || locals.name || 'input-' + Math.random().toString(36).substr(2, 9);
  const inputName = locals.name || inputId;
  const inputType = locals.type || 'text';
  const inputValue = locals.value || '';
  const inputPlaceholder = locals.placeholder || '';
  const inputLabel = locals.label || '';
  const isRequired = locals.required || false;
  const isDisabled = locals.disabled || false;
  const inputClass = locals.inputClass || '';
  const wrapperClass = locals.wrapperClass || '';
  const labelClass = locals.labelClass || '';
  const helpText = locals.help || '';
  const errorMessage = locals.error || '';
  const icon = locals.icon || '';
  const autocomplete = locals.autocomplete || '';
  const pattern = locals.pattern || '';
  const minLength = locals.minLength || '';
  const maxLength = locals.maxLength || '';
%>

<div class="mb-4 sm:mb-6 <%= wrapperClass %>">
  <!-- Label -->
  <% if (inputLabel) { %>
    <label for="<%= inputId %>" 
           class="block text-sm font-medium text-gray-700 mb-1 sm:mb-2 <%= labelClass %>">
      <%= inputLabel %>
      <% if (isRequired) { %>
        <span class="text-red-500 ml-1" aria-label="required">*</span>
      <% } %>
    </label>
  <% } %>

  <!-- Input wrapper (for icon support) -->
  <div class="relative">
    <!-- Icon (if provided) -->
    <% if (icon) { %>
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
          <%- icon %>
        </svg>
      </div>
    <% } %>

    <!-- Input field -->
    <input 
      type="<%= inputType %>"
      id="<%= inputId %>"
      name="<%= inputName %>"
      value="<%= inputValue %>"
      <% if (inputPlaceholder) { %>placeholder="<%= inputPlaceholder %>"<% } %>
      <% if (autocomplete) { %>autocomplete="<%= autocomplete %>"<% } %>
      <% if (pattern) { %>pattern="<%= pattern %>"<% } %>
      <% if (minLength) { %>minlength="<%= minLength %>"<% } %>
      <% if (maxLength) { %>maxlength="<%= maxLength %>"<% } %>
      <% if (isRequired) { %>required aria-required="true"<% } %>
      <% if (isDisabled) { %>disabled<% } %>
      <% if (errorMessage) { %>aria-invalid="true" aria-describedby="<%= inputId %>-error"<% } %>
      <% if (helpText) { %>aria-describedby="<%= inputId %>-help"<% } %>
      class="
        block w-full
        <!-- Mobile: base styles -->
        px-3 py-2 text-base
        <!-- Tablet and up: refined typography -->
        sm:px-4 sm:py-3 sm:text-sm
        <!-- Desktop: optimal sizing -->
        lg:px-4 lg:py-2.5 lg:text-sm
        
        border rounded-lg shadow-sm
        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-tenant-primary
        transition-all duration-200 ease-in-out
        
        <!-- Icon spacing -->
        <% if (icon) { %>pl-10 sm:pl-11<% } %>
        
        <!-- Error state styling -->
        <% if (errorMessage) { %>
          border-red-300 bg-red-50 text-red-900 placeholder-red-300
          focus:border-red-500 focus:ring-red-500
        <% } else { %>
          border-gray-300 bg-white text-gray-900 placeholder-gray-400
          focus:border-tenant-primary focus:ring-tenant-primary
          hover:border-gray-400
        <% } %>
        
        <!-- Disabled state -->
        <% if (isDisabled) { %>
          opacity-50 cursor-not-allowed bg-gray-100
        <% } %>
        
        <!-- Additional classes -->
        <%= inputClass %>
      "
    >
  </div>

  <!-- Help text -->
  <% if (helpText && !errorMessage) { %>
    <p id="<%= inputId %>-help" class="mt-1 sm:mt-2 text-xs sm:text-sm text-gray-600 leading-relaxed">
      <%= helpText %>
    </p>
  <% } %>

  <!-- Error message -->
  <% if (errorMessage) { %>
    <p id="<%= inputId %>-error" 
       class="mt-1 sm:mt-2 text-xs sm:text-sm text-red-600 leading-relaxed flex items-start" 
       role="alert">
      <svg class="flex-shrink-0 h-4 w-4 mt-0.5 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
      </svg>
      <span><%= errorMessage %></span>
    </p>
  <% } %>
</div>

<!-- Progressive enhancement for specific input types -->
<% if (inputType === 'password') { %>
  <script>
    (function() {
      const input = document.getElementById('<%= inputId %>');
      const wrapper = input.parentElement;
      
      // Add password toggle button
      const toggleBtn = document.createElement('button');
      toggleBtn.type = 'button';
      toggleBtn.className = 'absolute inset-y-0 right-0 pr-3 flex items-center';
      toggleBtn.innerHTML = `
        <svg class="h-5 w-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      `;
      toggleBtn.setAttribute('aria-label', 'Toggle password visibility');
      
      toggleBtn.addEventListener('click', function() {
        const isPassword = input.type === 'password';
        input.type = isPassword ? 'text' : 'password';
        toggleBtn.innerHTML = isPassword ? 
          `<svg class="h-5 w-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
          </svg>` :
          `<svg class="h-5 w-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
          </svg>`;
      });
      
      wrapper.appendChild(toggleBtn);
    })();
  </script>
<% } %>

<% if (inputType === 'tel') { %>
  <script>
    (function() {
      const input = document.getElementById('<%= inputId %>');
      
      // Format phone number as user types
      input.addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');
        
        // Indian phone number formatting
        if (value.length >= 10) {
          value = value.substring(0, 10);
          value = value.replace(/(\d{5})(\d{5})/, '$1 $2');
        }
        
        e.target.value = value;
      });
      
      // Validation
      input.addEventListener('blur', function(e) {
        const phoneRegex = /^[6-9]\d{4}\s?\d{5}$/;
        if (e.target.value && !phoneRegex.test(e.target.value)) {
          SchoolERP.forms.showFieldErrors(e.target, ['Please enter a valid 10-digit mobile number']);
        } else {
          SchoolERP.forms.showFieldErrors(e.target, []);
        }
      });
    })();
  </script>
<% } %>