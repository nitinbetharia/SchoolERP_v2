<%- include('../../layouts/base') { body: `
<!-- Academic Year Setup Step - SETUP-01-003 -->
<div class="max-w-4xl mx-auto">
    <!-- Wizard Navigation -->
    <%- include('../../partials/wizard/wizard-nav') %>
    
    <!-- Step Content -->
    <div class="bg-white rounded-lg shadow-md border border-gray-200">
        <div class="p-6 border-b border-gray-200">
            <h2 class="text-2xl font-bold text-gray-900">Academic Year Setup</h2>
            <p class="mt-1 text-gray-600">
                Configure your current academic year. This will be used for student admissions, fee collection, and academic planning.
            </p>
        </div>
        
        <form id="academic-year-form" data-wizard-form class="p-6" method="POST" action="/setup/trust-setup/academic-year">
            <!-- Hidden school_id (from previous step result) -->
            <% 
                const schoolResult = wizard.session.currentData['school-basic_result'];
                const schoolId = schoolResult ? schoolResult.school_id : formData.school_id;
            %>
            <input type="hidden" name="school_id" value="<%= schoolId %>">
            
            <!-- Year Name -->
            <div class="mb-6">
                <label for="year_name" class="block text-sm font-medium text-gray-700 mb-2">
                    Academic Year Name <span class="text-red-500">*</span>
                </label>
                <input type="text" 
                       id="year_name" 
                       name="year_name" 
                       value="<%= formData.year_name || '' %>"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-tenant-primary focus:border-tenant-primary
                              <%= fieldErrors.year_name ? 'border-red-300 bg-red-50' : '' %>"
                       placeholder="e.g., 2024-2025"
                       required
                       maxlength="50">
                <% if (fieldErrors.year_name) { %>
                    <p class="mt-1 text-sm text-red-600"><%= fieldErrors.year_name %></p>
                <% } %>
                <p class="mt-1 text-sm text-gray-500">
                    Usually formatted as "YYYY-YYYY" (e.g., 2024-2025)
                </p>
            </div>

            <!-- Start Date -->
            <div class="mb-6">
                <label for="start_date" class="block text-sm font-medium text-gray-700 mb-2">
                    Academic Year Start Date <span class="text-red-500">*</span>
                </label>
                <input type="date" 
                       id="start_date" 
                       name="start_date" 
                       value="<%= formData.start_date ? formData.start_date.split('T')[0] : '' %>"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-tenant-primary focus:border-tenant-primary
                              <%= fieldErrors.start_date ? 'border-red-300 bg-red-50' : '' %>"
                       required>
                <% if (fieldErrors.start_date) { %>
                    <p class="mt-1 text-sm text-red-600"><%= fieldErrors.start_date %></p>
                <% } %>
                <p class="mt-1 text-sm text-gray-500">
                    First day of the academic year
                </p>
            </div>

            <!-- End Date -->
            <div class="mb-6">
                <label for="end_date" class="block text-sm font-medium text-gray-700 mb-2">
                    Academic Year End Date <span class="text-red-500">*</span>
                </label>
                <input type="date" 
                       id="end_date" 
                       name="end_date" 
                       value="<%= formData.end_date ? formData.end_date.split('T')[0] : '' %>"
                       class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-tenant-primary focus:border-tenant-primary
                              <%= fieldErrors.end_date ? 'border-red-300 bg-red-50' : '' %>"
                       required>
                <% if (fieldErrors.end_date) { %>
                    <p class="mt-1 text-sm text-red-600"><%= fieldErrors.end_date %></p>
                <% } %>
                <p class="mt-1 text-sm text-gray-500">
                    Last day of the academic year
                </p>
            </div>

            <!-- Quick Date Presets -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-3">
                    Quick Presets
                </label>
                <div class="grid grid-cols-2 sm:grid-cols-4 gap-2">
                    <button type="button" 
                            class="preset-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-tenant-primary"
                            data-start="2024-04-01" data-end="2025-03-31" data-name="2024-2025">
                        2024-2025
                    </button>
                    <button type="button" 
                            class="preset-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-tenant-primary"
                            data-start="2025-04-01" data-end="2026-03-31" data-name="2025-2026">
                        2025-2026
                    </button>
                    <button type="button" 
                            class="preset-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-tenant-primary"
                            data-start="2024-06-01" data-end="2025-05-31" data-name="2024-2025">
                        Jun-May
                    </button>
                    <button type="button" 
                            class="preset-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-tenant-primary"
                            data-start="2024-07-01" data-end="2025-06-30" data-name="2024-2025">
                        Jul-Jun
                    </button>
                </div>
                <p class="mt-2 text-sm text-gray-500">
                    Click a preset to quickly fill in common academic year patterns
                </p>
            </div>

            <!-- Current Year Checkbox -->
            <div class="mb-6">
                <div class="flex items-center">
                    <input type="checkbox" 
                           id="is_current" 
                           name="is_current" 
                           value="true"
                           <%= formData.is_current !== false ? 'checked' : '' %>
                           class="h-4 w-4 text-tenant-primary focus:ring-tenant-primary border-gray-300 rounded">
                    <label for="is_current" class="ml-2 block text-sm text-gray-900">
                        This is the current academic year
                    </label>
                </div>
                <p class="mt-1 text-sm text-gray-500">
                    Mark this if this academic year is currently active for admissions and operations
                </p>
            </div>

            <!-- Active Status -->
            <div class="mb-8">
                <div class="flex items-center">
                    <input type="checkbox" 
                           id="is_active" 
                           name="is_active" 
                           value="true"
                           <%= formData.is_active !== false ? 'checked' : '' %>
                           class="h-4 w-4 text-tenant-primary focus:ring-tenant-primary border-gray-300 rounded">
                    <label for="is_active" class="ml-2 block text-sm text-gray-900">
                        Academic year is active
                    </label>
                </div>
                <p class="mt-1 text-sm text-gray-500">
                    Only active academic years can be used for student operations
                </p>
            </div>

            <!-- Academic Calendar Information -->
            <div class="bg-green-50 border border-green-200 rounded-md p-4 mb-6">
                <div class="flex">
                    <svg class="flex-shrink-0 h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                    </svg>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-green-800">Academic Year Planning</h3>
                        <div class="mt-2 text-sm text-green-700">
                            <p>After setting up the academic year, you can:</p>
                            <ul class="list-disc list-inside mt-1 space-y-1">
                                <li>Configure academic terms/semesters</li>
                                <li>Set up examination schedules</li>
                                <li>Plan holiday calendars</li>
                                <li>Configure fee collection periods</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Duration Display -->
            <div id="year-duration" class="mb-6 text-sm text-gray-600" style="display: none;">
                <div class="bg-gray-50 border border-gray-200 rounded-md p-3">
                    <strong>Academic Year Duration:</strong> <span id="duration-text"></span>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="flex items-center justify-between pt-6 border-t border-gray-200">
                <div class="text-sm text-gray-500">
                    <span class="font-medium">Step 3 of <%= wizard.config.steps.length %></span>
                </div>
                
                <div class="flex space-x-3">
                    <a href="/setup/trust-setup/school-basic" 
                       class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-tenant-primary">
                        Back
                    </a>
                    
                    <button type="submit" 
                            id="submit-btn"
                            class="px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-tenant-primary hover:bg-tenant-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-tenant-primary disabled:opacity-50 disabled:cursor-not-allowed">
                        Continue to Classes Setup
                        <svg class="ml-2 -mr-1 w-4 h-4 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Step-specific JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('academic-year-form');
    const submitBtn = document.getElementById('submit-btn');
    const startDateInput = document.getElementById('start_date');
    const endDateInput = document.getElementById('end_date');
    const yearNameInput = document.getElementById('year_name');
    const durationDiv = document.getElementById('year-duration');
    const durationText = document.getElementById('duration-text');
    const presetButtons = document.querySelectorAll('.preset-btn');
    
    // Preset button handlers
    presetButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const startDate = this.dataset.start;
            const endDate = this.dataset.end;
            const name = this.dataset.name;
            
            startDateInput.value = startDate;
            endDateInput.value = endDate;
            yearNameInput.value = name;
            
            updateDuration();
        });
    });
    
    // Update duration display
    function updateDuration() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;
        
        if (startDate && endDate) {
            const start = new Date(startDate);
            const end = new Date(endDate);
            const diffTime = end - start;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            const diffMonths = Math.round(diffDays / 30.44);
            
            if (diffDays > 0) {
                durationText.textContent = \`\${diffDays} days (\${diffMonths} months)\`;
                durationDiv.style.display = 'block';
                
                // Validate reasonable duration
                if (diffDays < 180 || diffDays > 400) {
                    durationDiv.className = 'mb-6 text-sm text-red-600';
                    durationText.innerHTML = \`<strong>Warning:</strong> \${diffDays} days (\${diffMonths} months) - This seems unusual for an academic year\`;
                } else {
                    durationDiv.className = 'mb-6 text-sm text-gray-600';
                }
            } else {
                durationDiv.style.display = 'none';
            }
        } else {
            durationDiv.style.display = 'none';
        }
    }
    
    // Auto-generate year name from dates
    function autoGenerateYearName() {
        const startDate = startDateInput.value;
        const endDate = endDateInput.value;
        
        if (startDate && endDate && !yearNameInput.value) {
            const startYear = new Date(startDate).getFullYear();
            const endYear = new Date(endDate).getFullYear();
            yearNameInput.value = \`\${startYear}-\${endYear}\`;
        }
    }
    
    // Date input handlers
    startDateInput.addEventListener('change', function() {
        updateDuration();
        autoGenerateYearName();
        
        // Set minimum end date
        endDateInput.min = this.value;
    });
    
    endDateInput.addEventListener('change', function() {
        updateDuration();
        autoGenerateYearName();
        
        // Set maximum start date
        startDateInput.max = this.value;
    });
    
    // Initial duration update
    updateDuration();
    
    // Form submission with loading state
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Validate dates
        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        
        if (endDate <= startDate) {
            alert('End date must be after start date');
            return;
        }
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-4 w-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Processing...';
        
        try {
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            
            // Convert checkboxes to boolean
            data.is_current = formData.has('is_current');
            data.is_active = formData.has('is_active');
            
            // Convert dates to ISO format
            data.start_date = new Date(data.start_date).toISOString();
            data.end_date = new Date(data.end_date).toISOString();
            
            const response = await fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Continue to next step
                window.location.href = result.data.redirect;
            } else {
                // Handle errors
                if (result.error.code === 'VALIDATION_ERROR' && result.error.details) {
                    // Display field-specific errors
                    result.error.details.forEach(error => {
                        if (error.path && error.path.length > 0) {
                            const field = document.getElementById(error.path[0]);
                            if (field) {
                                field.classList.add('border-red-300', 'bg-red-50');
                                
                                // Remove existing error message
                                const existingError = field.parentNode.querySelector('.text-red-600');
                                if (existingError) existingError.remove();
                                
                                // Add new error message
                                const errorMsg = document.createElement('p');
                                errorMsg.className = 'mt-1 text-sm text-red-600';
                                errorMsg.textContent = error.message;
                                field.parentNode.appendChild(errorMsg);
                            }
                        }
                    });
                } else {
                    alert('Error: ' + (result.error.message || 'Unknown error occurred'));
                }
            }
        } catch (error) {
            console.error('Submit error:', error);
            alert('An error occurred while submitting the form. Please try again.');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = 'Continue to Classes Setup <svg class="ml-2 -mr-1 w-4 h-4 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/></svg>';
        }
    });
    
    // Clear field errors on input
    const inputs = form.querySelectorAll('input, textarea, select');
    inputs.forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('border-red-300', 'bg-red-50');
            const errorMsg = this.parentNode.querySelector('.text-red-600');
            if (errorMsg) errorMsg.remove();
        });
    });
});
</script>
` } %>